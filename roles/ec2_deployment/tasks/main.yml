---
# tasks file for ec2_deployment
  - name: Gathering existing EC2 instance details
    ec2_instance_facts:
      region: "{{ region }}"
      filters:
        tag:Name: "{{ server_name }}"
        instance-state-name: running
    register: existing_ec2
  - name: Launch "{{ os_name }}" EC2 instances
    ec2:
      region: "{{ region }}"
#      key_name: "{{ pem }}"
      key_name: my_key
      group: "{{ secgroup }}"
      instance_type: "{{ instance_type }}"
      image: "{{ ami }}"
      wait: yes
      count: "{{ count }}"
      vpc_subnet_id: "{{ subnet }}"
      assign_public_ip: "{{ assign_public_ip }}"
      instance_tags:
        Name: "{{ server_name }}"
    register: ec2
    when: existing_ec2.instances == [] 
  - name: Checking if an Instance exists with same name; fail if there is instance with same name or skip this task and proceed to create the Instance 
    fail:
      msg: "The Instance with name'{{ server_name }}' already exists. Please crete the Instance with another name"
    when: existing_ec2.instances != []
  - name: Waiting for SSH to come up
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22
      delay: 60
      timeout: 120
      state: started
    with_items: "{{ ec2.instances }}"
    no_log: True
    register: ssh_result
    ignore_errors: yes
  - name: Checking the success of VM creation and SSH connection. Skip if success or fail otherwise
    fail:
      msg: "Something went wrong, not able to establish ssh connection to the newly created VM. Please check VM status from AWS console and it's SG/ACL policies"
    when: ssh_result is failed
  - debug:
      msg: "Successfully launched '{{ count }}' instance with name '{{item.public_dns_name }}' and with IP '{{item.public_ip}}' and SSH connection established"
    with_items: "{{ ec2.instances }}"
  - name: Add the newly added Instances to a Dynamic Inventory
    add_host:
      name: "{{ item.public_ip }}"
      groups: patch_inventory
      ansible_ssh_user: ec2-user
#      ansible_ssh_private_key_file: "~/.ssh/id_rsa"
      ansible_ssh_private_key_file: "./my_key.pem"
    with_items: "{{ ec2.instances }}"  
    no_log: True
